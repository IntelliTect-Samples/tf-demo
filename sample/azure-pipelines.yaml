
trigger:
- TerraformDemo3

pool:
  vmImage: 'windows-latest'

variables:
  - name: working_directory
    value: '$(Agent.BuildDirectory)/s/sample/deployment'

stages:
- stage: Plan

  jobs:
  - job: Plan
    displayName: "Plan"
    steps:
    - checkout: self
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      name: InstallTerraform
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.1.7'

    - task: PowerShell@2
      name: 'DefineEnvironment'
      displayName: 'Define Environment'
      inputs:
        targetType: 'inline'
        script: |
          Install-Module Az.Accounts -force
          Import-Module AzureRM.profile -force

    - task: PowerShell@2
      name: 'ValidateTerraform'
      displayName: 'Validate Terraform'
      inputs: 
        targetType: 'inline'
        workingDirectory: $(working_directory)
        script: |
          pwd

          terraform init -input=false `
          --backend-config "storage_account_name=$(storage_account_name)" `
          --backend-config="container_name=$(container_name)" `
          --backend-config="key=$(storage_key)" `
          --backend-config="access_key=$(access_key)"
          
          echo --- Terraform check ---
          terraform --version
          terraform validate -no-color

          $result = Select-String -Path *.tf -Pattern "^resource"
          if ($result) {
              $result
              exit 1
          }
          else {
              exit 0
          }

    - task: PowerShell@2
      name: 'TerraformPlan'
      displayName: 'Terraform Plan'
      inputs: 
        targetType: 'inline'
        workingDirectory: $(working_directory)
        script: |
          terraform plan -out plan.tfplan `
          -var "subscription_id=$(subscription_id)" `
          -var "tenant_id=$(tenant_id)" `
          -var "client_id=$(client_id)" `
          -var "client_secret=$(client_secret)" `
          -input=false -no-color  3>$out/warn.txt 2>$out/error.txt >$out/output.txt
        
          "--- errors ---------------------------------------------------------------------------------------------"
          type $out/error.txt
          "--- warnings -------------------------------------------------------------------------------------------"
          type $out/warn.txt
          "--- output ---------------------------------------------------------------------------------------------"
          type $out/output.txt

    - publish: $(Build.ArtifactStagingDirectory)
      artifact: Plan

- stage: WaitForValidation
  displayName: 'Wait for Approval'
  dependsOn: Plan
  condition: eq(dependencies.Plan.result, 'Succeeded')
  jobs:
    - job: waitForValidationJob
      displayName: Wait for Approval
      pool: server
      timeoutInMinutes: 4320
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 240
          continueOnError: true
          inputs:
            instructions: 'Approval for Apply'
            onTimeout: reject

- stage: ApplyPlan
  displayName: 'Apply Plan'
  dependsOn: WaitForValidation
  condition: eq(dependencies.WaitForValidation.result, 'Succeeded')
  jobs:
    - job: ApplyPlanJob
      displayName: Apply Plan
      timeoutInMinutes: 4320
      steps:
        - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
          name: InstallTerraform
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: '1.1.7'

        - task: DownloadPipelineArtifact@2
          displayName: Download Plan
          inputs:
            buildType: 'current'
            artifactName: 'Plan'
            targetPath: '$(working_directory)'

        - task: AzureCLI@2
          displayName: 'terraform apply'
          inputs:
            workingDirectory: $(working_directory)
            azureSubscription: 'Demo-Connection'
            scriptLocation: 'inlineScript'
            scriptType: ps
            inlineScript: |
              terraform init -input=false `
              --backend-config "storage_account_name=$(storage_account_name)" `
              --backend-config="container_name=$(container_name)" `
              --backend-config="key=$(storage_key)" `
              --backend-config="access_key=$(access_key)"

              terraform apply `
                      -input=false `
                      -no-color `
                      plan.tfplan
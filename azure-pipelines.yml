# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- TerraformDemo3

pool:
  vmImage: 'windows-latest'
stages:
- stage: Deploy

  jobs:
  - deployment: Plan
    displayName: "Plan"
    strategy:
      runOnce: 
        deploy:
          steps:
          - checkout: self
          - task: TerraformInstaller@0
            name: InstallTerraform
            displayName: 'Install Terraform'
            inputs:
              terraformVersion: '1.0.8'

          - task: PowerShell@2
            name: 'DefineEnvironment'
            displayName: 'Define Environment'
            inputs:
              targetType: 'inline'
              script: |
                Install-Module Az.Accounts -force
                Import-Module AzureRM.profile -force

          - task: PowerShell@2
            name: 'DeployTerraform'
            displayName: 'Deploy Terraform'
            inputs: 
              targetType: 'inline'
              workingDirectory: $(Agent.BuildDirectory)/s/terraform/root-shared
              script: |
                terraform init -input=false `
                --backend-config "storage_account_name=$(backend_storage_account_name)" `
                --backend-config="container_name=$(DefineEnvironment.ContainerName)" `
                --backend-config="key=$(backend_shared_storage_key)" `
                --backend-config="access_key=$(storage_access_key)"
                
                terraform plan -out plan.out `
                -var "subscription_id=$(subscription_id)" `
                -var "tenant_id=$(tenant_id)" `
                -var "client_id=$(client_id)" `
                -var "client_secret=$(client_secret)" `
                -var "environment=$(DefineEnvironment.Environment)"
                terraform apply plan.out

          - task: PowerShell@2
            name: DeployStagingInfrastructure
            displayName: 'Deploy Staging Infrastructure'
            inputs: 
              targetType: 'inline'
              workingDirectory: $(Agent.BuildDirectory)/s/terraform/root-staging-prod
              script: |
                terraform init -input=false `
                --backend-config "storage_account_name=$(backend_storage_account_name)" `
                --backend-config="container_name=$(container_name)" `
                --backend-config="key=$(backend_storage_key)" `
                --backend-config="access_key=$(access_key)"

                terraform plan -out plan.out `
                -var "subscription_id=$(subscription_id)" `
                -var "tenant_id=$(tenant_id)" `
                -var "client_id=$(client_id)" `
                -var "client_secret=$(client_secret)" `
                -var "environment=$(DefineEnvironment.Environment)" `
                -var "state_storage_account_name=$(backend_storage_account_name)" `
                -var "shared_container_name=$(DefineEnvironment.ContainerName)" `
                -var "shared_key=$(backend_shared_storage_key)" `
                -var "state_storage_access_key=$(storage_access_key)" `
                -var "prod_or_staging=staging"

                terraform apply plan.out
